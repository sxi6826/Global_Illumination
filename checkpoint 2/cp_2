from numpy import *
import numpy as np
import math
from PIL import Image

def main():
    eyepoint = np.matrix('0.0,0.0,0.0')
    lookat = np.matrix('0.0,0.0,1.0')
    up = np.matrix('0.0,1.0,0.0')
    n = np.matrix('0.0,0.0,0.0')
    u = np.matrix('0.0,0.0,0.0')
    v = np.matrix('0.0,0.0,0.0')
    n[0, 0] = eyepoint[0, 0] - lookat[0, 0]
    n[0, 1] = eyepoint[0, 1] - lookat[0, 1]
    n[0, 2] = eyepoint[0, 2] - lookat[0, 2]
    magn = np.linalg.norm(n)
    n[0, 0], n[0, 1], n[0, 2] = n[0, 0] / magn, n[0, 1] / magn, n[0, 2] / magn
    u = np.cross(up, n)
    magu = np.linalg.norm(u)
    u[0, 0], u[0, 1], u[0, 2] = u[0, 0] / magu, u[0, 1] / magu, u[0, 2] / magu
    v = np.cross(n, u)
    h, w = 10.0, 10.0
    H, W =200.0, 200.0
    pixel_h = h / (2 * H)
    # print (pixel_h)
    pixel_w = w / (2 * W)
    lst = []

    for i in range(int(H)):
        dy = h / 2 - (((2 * i) + 1) * (pixel_h))
        slst = []
        dz = 3.0
        for j in range(int(W)):
            dx = (-w / 2) + (((2 * j) + 1) * (pixel_w))

            d = np.matrix('0.0,0.0,0.0')
            d[0, 0], d[0, 1], d[0, 2] = dx, dy, dz
            # print(dx,dy,dz)
            magd = np.linalg.norm(d)
            d[0, 0], d[0, 1], d[0, 2] = d[0, 0] / magd, d[0, 1] / magd, d[0, 2] / magd
            dx1, dy1, dz1 = d[0, 0], d[0, 1], d[0, 2]

            xc, yc, zc = 0.0, 1.6, 5
            r = 3.2

            b = (dx1 * (-xc)) + (dy1 * (-yc)) + (dz1 * (-zc))
            # print b
            b = b * 2
            # print b
            c = (xc * xc) + (yc * yc) + (zc * zc) - (r * r)
            # print (4*c)
            # print ((b * b) - (4*c))
            if ((b * b) - (4 * c) >= 0):
                root = math.sqrt((b * b) - (4 * c))
                w1 = ((-b) + root) / (2)
                w2 = ((-b) - root) / (2)
                wa = minimum(w1, w2)
                #print wa
            else:
                wa = -1

            xcs, ycs, zcs = 2.5, 0.5, 6
            rs = 2.7

            b = (dx1 * (-xcs)) + (dy1 * (-ycs)) + (dz1 * (-zcs))
            b = b * 2
            # print b
            c = (xcs * xcs) + (ycs * ycs) + (zcs * zcs) - (rs * rs)
            if ((b * b) - (4 * c) >= 0):
                root = math.sqrt((b * b) - (4 * c))
                w1 = ((-b) + root) / (2)
                w2 = ((-b) - root) / (2)
                wb = minimum(w1, w2)
            else:
                wb = -1

            # triangle: (-5,-5,0), (2,-5,10), (5,-5,0)
            # triangle: (2,-5,10), (5,-5,10), (5,-5,0)

            p0 = np.matrix('-5.0,-5.0,0.0')
            p1 = np.matrix('-5.0,-5.0,15.0')
            p2 = np.matrix('5.0,-5.0,0.0')

            e1 = np.matrix('0.0,0.0,0.0')
            e2 = np.matrix('0.0,0.0,0.0')
            t = np.matrix('0.0,0.0,0.0')
            p = np.matrix('0.0,0.0,0.0')
            q = np.matrix('0.0,0.0,0.0')

            e1[0, 0], e1[0, 1], e1[0, 2] = p1[0, 0] - p0[0, 0], p1[0, 1] - p0[0, 1], p1[0, 2] - p0[0, 2]
            e2[0, 0], e2[0, 1], e2[0, 2] = p2[0, 0] - p0[0, 0], p2[0, 1] - p0[0, 1], p2[0, 2] - p0[0, 2]
            t[0, 0], t[0, 1], t[0, 2] = (- p0[0, 0]), (- p0[0, 1]), (- p0[0, 2])
            # print (e1,e2,t)
            p = np.cross(d, e2)
            q = np.cross(t, e1)
            # print(p,q)

            e1t = e1.transpose()
            e2t = e2.transpose()
            tt = t.transpose()
            dt = d.transpose()

            pe1 = np.dot(p, e1t)
            qe2 = np.dot(q, e2t)
            pt = np.dot(p, tt)
            qd = np.dot(q, dt)

            # intersect = True
            if (pe1 == 0):
                intersect = False
            else:
                # intersect = True
                wt = qe2 / pe1
                u = pt / pe1
                v = qd / pe1
                if (wt < 0 or u < 0 or v < 0 or (u + v) > 1):
                    intersect = False
                else:
                    intersect = True

            p0s = np.matrix('-5.0,-5.0,15.0')
            p1s = np.matrix('5.0,-5.0,15.0')
            p2s = np.matrix('5.0,-5.0,0.0')

            e1s = np.matrix('0.0,0.0,0.0')
            e2s = np.matrix('0.0,0.0,0.0')
            ts = np.matrix('0.0,0.0,0.0')
            ps = np.matrix('0.0,0.0,0.0')
            qs = np.matrix('0.0,0.0,0.0')

            e1s[0, 0], e1s[0, 1], e1s[0, 2] = p1s[0, 0] - p0s[0, 0], p1s[0, 1] - p0s[0, 1], p1s[0, 2] - p0s[0, 2]
            e2s[0, 0], e2s[0, 1], e2s[0, 2] = p2s[0, 0] - p0s[0, 0], p2s[0, 1] - p0s[0, 1], p2s[0, 2] - p0s[0, 2]
            ts[0, 0], ts[0, 1], ts[0, 2] = (- p0s[0, 0]), (- p0s[0, 1]), (- p0s[0, 2])
            # print (e1,e2,t)
            ps = np.cross(d, e2s)
            qs = np.cross(ts, e1s)
            # print(p,q)

            e1ts = e1s.transpose()
            e2ts = e2s.transpose()
            tts = ts.transpose()
            dts = d.transpose()

            pe1s = np.dot(ps, e1ts)
            qe2s = np.dot(qs, e2ts)
            pts = np.dot(ps, tts)
            qds = np.dot(qs, dts)

            # intersect = True
            if (pe1s == 0):
                intersects = False
            else:
                # intersect = True
                wts = qe2s / pe1s
                us = pts / pe1s
                vs = qds / pe1s
                if (wts < 0 or us < 0 or vs < 0 or (us + vs) > 1):
                    intersects = False
                else:
                    intersects = True

            #print (wa,wb)
            if (wa >= 0 or wb >= 0):
                clr = (0, 0, 0)
            elif(intersect == True or intersects == True):
                clr = (128,0,0)
            else:
                clr = (0, 0, 255)
            slst.append(clr)
        lst.append(slst)

    arr = np.array(lst, dtype=np.uint8)
    new_image = Image.fromarray(arr)
    new_image.save('cp_2.png')


if __name__ == '__main__':
    main()
